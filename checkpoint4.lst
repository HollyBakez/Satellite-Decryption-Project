     1                                  %include "satStruct.inc"
     1                              <1> struc   satMessage                             
     2 00000000 <res 00000004>      <1>   Id                         resb 4       ;  0 
     3 00000004 <res 00000008>      <1>   NodeName                   resb 8       ;  4 
     4 0000000C <res 00000004>      <1>   NodeNumber                 resd 1       ; 12 
     5 00000010 <res 00000004>      <1>   tx_packet_nbr              resd 1       ; 16 
     6 00000014 <res 00000004>      <1>   rx_packet_nbr              resd 1       ; 20 
     7 00000018 <res 00000004>      <1>   track_object_nbr           resd 1       ; 24 
     8 0000001C <res 00000004>      <1>   track_object_x_pos         resd 1       ; 28 
     9 00000020 <res 00000004>      <1>   track_object_y_pos         resd 1       ; 32 
    10 00000024 <res 00000004>      <1>   track_object_z_pos         resd 1       ; 36 
    11 00000028 <res 00000004>      <1>   track_object_velocity      resd 1       ; 40 
    12 0000002C <res 00000004>      <1>   status_code                resd 1       ; 44 
    13 00000030 <res 00000001>      <1>   msg_length                 resb 1       ; 48 
    14 00000031 <res 00000080>      <1>   status_msg                 resb 128     ; 49 
    15                              <1> endstruc                                       
     2                                  global _start
     3                                  section .text
     4                                  _start:
     5                                  ;-------Opens the file----------
     6 00000000 B802000000              	mov rax, SYS_OPEN ; moves the open file command into the rax register
     7 00000005 48BF-                   	mov rdi, filename ; moves our filename containing our sat data into rdi
     7 00000007 [1800000000000000] 
     8 0000000F BE00000000              	mov rsi, O_RDONLY ; sets the file to read only
     9 00000014 BA00000000              	mov rdx, 0        ; moving a null into rdx
    10 00000019 0F05                    	syscall           ; call the system to do an exit
    11                                  
    12                                  ;--------Reads the file---------
    13                                  
    14 0000001B 50                      	push rax          ; pushes rax open file command into the stack
    15 0000001C 4889C7                  	mov rdi, rax      ; moves rax into rdi, open file command passes to the filename var
    16 0000001F B800000000              	mov rax, SYS_READ ; moves the read-file command into the rax where the file is
    17 00000024 48BE-                   	mov rsi, text     ; points to stored read-text location
    17 00000026 [0000000000000000] 
    18 0000002E BAB4000000              	mov rdx, 180      ; 180 bytes to be read from the file
    19 00000033 0F05                    	syscall
    20                                  
    21                                  
    22                                  ;---------calling decrypt subroutine--------
    23                                    init:
    24 00000035 41B900000000              mov r9, 0 ; j =0
    25 0000003B 41B800000000            	mov r8, 0 ; i = 0
    26                                    resetr9:
    27 00000041 4D31C9                  	xor r9,r9
    28                                  
    29                                    decrypt:                ;subroutine called decrypt
    30                                  
    31 00000044 4981F8B4000000          	cmp r8, 180			; i < 180
    32 0000004B 731C                    	jae functionexit; if equal, then jump to our exit function
    33                                  
    34 0000004D 458A91[25000000]        	mov r10b, byte[Key+r9] ; r9 is our j, move key value into r10b
    35 00000054 453090[00000000]        	xor byte[text+r8], r10b	 ; r8 is our i
    36 0000005B 49FFC1                  	inc  r9			; j++
    37 0000005E 49FFC0                  	inc  r8			; i++
    38 00000061 4983F909                	cmp r9, 9  ; j > 9
    39 00000065 73DA                    	jae resetr9
    40                                  
    41 00000067 EBDB                    	jmp decrypt		; loop through again
    42                                  
    43                                   functionexit:
    44                                  
    45 00000069 B801000000              	mov     rax, 1          ; System call for write
    46 0000006E BF01000000              	mov     rdi, 1          ; File handle 1 is stdout
    47                                  
    48 00000073 BA00000000              	mov rdx, 0
    49 00000078 8A1425[30000000]        	mov dl, byte[text+msg_length]
    50                                  
    51 0000007F 488D3425[31000000]      	lea rsi,[text+status_msg]
    52 00000087 0F05                    	syscall                 ; invoke operating system to do the write
    53                                  
    54 00000089 E88E000000                      call printLF
    55                                  ;Print a nice name for this field
    56 0000008E 48BE-                   	mov rsi, track_obj
    56 00000090 [0700000000000000] 
    57 00000098 BA11000000              	mov rdx, 17
    58 0000009D B801000000              	mov     rax, 1          ; System call for write
    59 000000A2 BF01000000              	mov     rdi, 1          ; File handle 1 is stdout
    60 000000A7 0F05                            syscall
    61                                  
    62                                  
    63                                  ;Now, convert a field's endianness
    64 000000A9 8B0425[18000000]        	mov eax, dword[text + track_object_nbr]
    65 000000B0 41BC00000000            	mov r12, 0  ; j = 0
    66 000000B6 E87D000000              	call cvtEndian
    67                                  ;Print what is in eax
    68                                  
    69                                   getdword: ;gets the tracking number value
    70 000000BB 83F800                  	cmp eax, 0
    71 000000BE 7432                    	jz printDword
    72                                  
    73 000000C0 99                              cdq
    74 000000C1 F73C25[00000000]        	idiv dword[ten] ; divide num/10
    75 000000C8 890425[05000000]        	mov dword[num], eax ; num = num/10
    76                                  
    77 000000CF 891425[04000000]        	mov dword[rem], edx
    78                                  
    79 000000D6 800425[04000000]30      	add byte[rem], '0'
    80 000000DE 8A1425[04000000]        	mov dl, byte[rem]
    81                                  
    82 000000E5 41889424[B4000000]      	mov byte[string+r12], dl
    83 000000ED 49FFC4                  	inc r12
    84                                    
    85 000000F0 EBC9                      jmp getdword
    86                                     
    87                                   printDword:
    88 000000F2 B801000000                mov     rax, 1          ; System call for write
    89 000000F7 BF01000000                mov     rdi, 1          ; File handle 1 is stdout
    90 000000FC 48BE-                     mov 	  rsi, string
    90 000000FE [B400000000000000] 
    91 00000106 BA04000000                mov     rdx, 4
    92 0000010B 0F05                      syscall
    93 0000010D E80A000000                call printLF
    94                                  
    95                                   exit:
    96 00000112 B83C000000                mov     rax, 60         ; System call for exit
    97 00000117 4831FF                    xor     rdi, rdi        ; exit code 0
    98 0000011A 0F05                      syscall                 ; Invoke operating system to do the exit
    99                                    
   100                                   printLF:		  ; subroutine to call line feed
   101 0000011C B801000000                mov     rax, 1          ; System call for write
   102 00000121 BF01000000                mov     rdi, 1          ; File handle 1 is stdout
   103 00000126 48BE-                     mov 	  rsi, var
   103 00000128 [0600000000000000] 
   104 00000130 BA01000000                mov     rdx, 1
   105 00000135 0F05                      syscall
   106 00000137 C3                        ret
   107                                  
   108                                  ; Convert dword endian...
   109                                  ; eax has value to convert
   110                                  ; Will return converted value in eax
   111                                   cvtEndian:
   112 00000138 53                        push    rbx
   113                                   ;                            start with ; eax = 4 3 2 1
   114 00000139 C1C008                    rol     eax, 8                  ; eax = 3 2 1 4
   115 0000013C 89C3                      mov     ebx, eax
   116 0000013E 25FF00FF00                and     eax, 0x00ff00ff         ; eax = - 2 - 4
   117 00000143 81E300FF00FF              and     ebx, 0xff00ff00         ; ebx = 3 - 1 -
   118 00000149 C1CB10                    ror     ebx, 16                 ; ebx = 1 - 3 -
   119 0000014C 09D8                      or      eax, ebx                ; eax = 1 2 3 4
   120 0000014E 5B                        pop     rbx
   121 0000014F C3                        ret
   122                                  
   123                                  section .data
   124 00000000 0A000000                    ten: dd 10
   125 00000004 00                          rem: db 0
   126 00000005 00                          num: db 0
   127 00000006 0A                          var: db 10
   128 00000007 747261636B5F6F626A-         track_obj: db "track_object_nbr "
   128 00000010 6563745F6E627220   
   129 00000018 73617434317831302E-         filename db "sat41x10.dat", 0 ; declares filename to be the satellite.dat file
   129 00000021 64617400           
   130 00000025 361392A55A27F30032          Key:     db 	0x36, 0x13, 0x92, 0xa5, 0x5a, 0x27, 0xf3, 0x00, 0x32 ; declare the key to be decrypt, 9 bytes long
   131                                      SYS_OPEN  equ 2 ;constant declaration to open a file
   132                                      SYS_READ  equ 0 ;constant declaration to read a file
   133                                      SYS_CLOSE equ 3 ;constant declaration to close the file
   134                                      O_RDONLY  equ 0 ;constant declartion to set a file to be "read-only"
   135                                  
   136                                  section .bss
   137 00000000 <res 000000B4>          	text resb 180  ; reserve 180 bytes for the text to be read
   138 000000B4 <res 00000014>          	string resb 20 ; reserve 20 bytes for string
